Story: Parsing AMI

	As an Asterisk user
	I want to parse the AMI protocol
	So that I can control Asterisk
	
	TODO:
	- Ensure misc key/value pairs are is set exactly properly
	- Have a chop_buffer_for_new_data_of_size() method which kills old pointer-related variables
	
	Scenario: Parsing only the initial AMI version header
	
		Given a new parser
		And a version header for AMI 1.0
		
		When I parse the protocol
		
		Then the protocol should have parsed without syntax errors
		And the version should be set to 1.0
	
	Scenario: Parsing the initial AMI header and a login attempt
	
		Given a new parser
		And a version header for AMI 1.0
		And a normal login success with events
		
		When I parse the protocol
		
		Then the protocol should have parsed without syntax errors
		And 1 message should have been received
	
	Scenario: Parsing the initial AMI header and then a Response:Follows section
	
		Given a new parser
		And a version header for AMI 1.0
		And a multi-line Response:Follows body of ragel_description
		
		When I parse the protocol
		
		Then the protocol should have parsed without syntax errors
		And the 'follows' body of 1 message received should equal ragel_description
		
	Scenario: Parsing the initial AMI header and then a Response:Follows section

		Given a new parser
		And a version header for AMI 1.0
		And a multi-line Response:Follows body of ragel_description
		And a multi-line Response:Follows body of ragel_description

		When I parse the protocol

		Then the protocol should have parsed without syntax errors
		And the 'follows' body of 2 messages received should equal ragel_description

	Scenario: Parsing a stanza without receiving an AMI header

		Given a new parser
		And a normal login success with events

		When I parse the protocol

		Then the protocol should have parsed without syntax errors
		And 1 message should have been received
		
	Scenario: Receiving a bunch of random crap as soon as the socket is opened

		Given a new parser
		And syntactically invalid fuzz
		And a stanza break

		When I parse the protocol

		Then the protocol should have parsed with 1 syntax error
		And the syntax error fixture named fuzz should have been encountered
		And 0 messages should have been received
	
	Scenario: Receiving a random crap followed by an actual message

		Given a new parser
		And syntactically invalid fuzz
		And a stanza break
		And a normal login success with events

		When I parse the protocol

		Then the protocol should have parsed with 1 syntax error
		And the syntax error fixture named fuzz should have been encountered
		And 1 message should have been received

	Scenario: Receiving a Pong after a simulated login
		
		Given a new parser
		And a version header for AMI 1.0
		And a normal login success with events
		And a Pong response with an ActionID
		
		When I parse the protocol
		
		Then the protocol should have parsed without syntax errors
		And 2 messages should have been received
	
	Scenario: Ten Pong responses in a row
	
		Given a new parser
		And 5 Pong responses without an ActionID
		And 5 Pong responses with an ActionID
		
		When I parse the protocol
		
		Then the protocol should have parsed without syntax errors
		And 10 messages should have been received